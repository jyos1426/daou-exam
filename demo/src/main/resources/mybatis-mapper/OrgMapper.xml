<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.OrgMapper">
    <!--
        Oranization(조직) SQL Mapper

        @author hyeon
        @since 2022-04-30
    -->

    <!-- Organization Tree ResultMap -->
    <resultMap id="org_tree_node" type="com.example.demo.vo.OrganizationInfo" autoMapping="true">
        <id column="org_id" jdbcType="INTEGER" property="orgId" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="type" jdbcType="VARCHAR" property="type" />
        <result column="code" jdbcType="VARCHAR" property="code" />
        <result column="manager" jdbcType="INTEGER" property="manager" />
    </resultMap>

    <!-- Organization ResultMap -->
    <resultMap id="org_map" type="com.example.demo.vo.Organization" autoMapping="true">
        <id column="org_id" jdbcType="INTEGER" property="orgId" />
        <result column="org_type" jdbcType="VARCHAR" property="orgType" />
        <result column="parent_org_id" jdbcType="INTEGER" property="parentOrgId" />
    </resultMap>

    <!-- Organization Tree Columns -->
    <sql id="org_tree_column_list">
        org_id, name, type, code, manager, parent_org_id
    </sql>

    <!-- Organization DB Columns -->
    <sql id="org_column_list">
        org_id, org_type, parent_org_id
    </sql>

    <!-- Select Organization Top Node -->
    <select id="getOrgTopNode" parameterType="java.util.Map" resultMap="org_tree_node">
        SELECT
        <include refid="org_tree_column_list" />
        FROM (
            SELECT o.org_id, o.parent_org_id, dept_name AS name, dept_type AS type, NULL AS manager, dept_code AS code
            FROM organization o
                JOIN department d on o.org_id = d.org_id
        ) uni
        WHERE 1=1
        <!-- Filter By 'deptCode' -->
        <choose>
            <when test="deptCode != null">
                AND code = #{deptCode}
            </when>
            <otherwise>
                AND org_id = 1
            </otherwise>
        </choose>
    </select>

    <!-- Select Children -->
    <select id="getOrgChildrenNode" parameterType="java.util.Map" resultMap="org_tree_node">
        SELECT
        <include refid="org_tree_column_list" />
        FROM (
            SELECT o.org_id, o.parent_org_id, dept_name AS name, dept_type AS type, NULL AS manager, dept_code AS code
            FROM organization o
                JOIN department d on o.org_id = d.org_id
        <!-- Filter By 'deptOnly'-->
        <if test="deptOnly == false">
            UNION all
            SELECT o.org_id, o.parent_org_id, mem_name AS name, 'Manager' AS type, manager, NULL AS code
            FROM organization o
                JOIN member m on o.org_id = m.org_id
        </if>
        ) uni
        WHERE uni.parent_org_id = #{parentOrgId}
        <if test="filerOrgIds != null">
            AND uni.org_id IN
            <foreach item="orgId" index="index" collection="filerOrgIds" open="(" separator="," close=")">
                #{orgId}
            </foreach>
        </if>
    </select>


    <!-- Select Organization Tree -->
    <select id="getOrgIdListByKeyword" parameterType="java.util.Map" resultType="int">
        SELECT DISTINCT org_id
        FROM (
            SELECT o.org_id, o.parent_org_id, dept_name AS name, dept_type AS type, dept_code AS code
            FROM organization o
                JOIN department d on o.org_id = d.org_id
            UNION
            SELECT o.org_id, o.parent_org_id, mem_name AS NAME, 'Member' AS type, NULL AS code
            FROM organization o
                JOIN member m on o.org_id = m.org_id
        )
        <!-- Filter By 'searchKeyword' -->
        START WITH name LIKE '%${searchKeyword}%'
        <!-- Filter By 'searchType' -->
        <choose>
            <when test='searchType.equals("dept")'>
                AND type != 'Member'
            </when>
            <otherwise>
                AND type = 'Member'
            </otherwise>
        </choose>
        CONNECT BY PRIOR parent_org_id = org_id
    </select>

    <!-- Select Organization Children Id List -->
    <select id="getOrgChildrenIdList" parameterType="int" resultType="int">
        SELECT org_id
        FROM (
            SELECT o.org_id, o.parent_org_id
            FROM organization o
                JOIN department d on o.org_id = d.org_id
            UNION all
            SELECT o.org_id, o.parent_org_id
            FROM organization o
                JOIN member m on o.org_id = m.org_id
        )
        START WITH org_id = #{orgId}
        CONNECT BY PRIOR org_id = parent_org_id
    </select>

    <!-- Select One Organization By Id -->
    <select id="getOrgById" parameterType="int" resultMap="org_map">
        SELECT
        <include refid="org_column_list" />
        FROM organization
        WHERE org_id = #{orgId}
    </select>

    <!-- Insert Organization -->
    <insert id="insertOrganization" parameterType="Organization">
        INSERT INTO organization (
            org_id, org_type, parent_org_id
        ) VALUES (
            org_id_seq.NEXTVAL, #{orgType}, #{parentOrgId}
        )

        /*  check result type */
        <selectKey keyProperty="orgId" resultType="int" order="AFTER">
            select org_id_seq.CURRVAL FROM DUAL
        </selectKey>
    </insert>

    <!-- Update Organization -->
    <update id="updateOrganization" parameterType="Organization">
        UPDATE organization
        SET org_type = #{orgType},
            parent_org_id = #{parentOrgId}
        WHERE org_id = #{orgId}
    </update>

    <!-- Delete Organizations -->
    <delete id="deleteOrganization">
        DELETE FROM organization WHERE org_id = #{orgId}
    </delete>

    <!-- Delete Organizations -->
    <delete id="deleteOrganizations">
        DELETE FROM organization 
        WHERE org_id in
        <foreach item="orgId" index="index" collection="orgIds" open="(" separator="," close=")">
            #{orgId}
        </foreach>
    </delete>
</mapper>